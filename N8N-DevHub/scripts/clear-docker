#!/bin/bash
# N8N-DevHub - Script de Limpeza Docker
# Permite limpeza seletiva ou completa do ambiente Docker

set -e

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fun√ß√µes de limpeza
clean_containers() {
    echo -e "${BLUE}üóëÔ∏è  Removendo containers...${NC}"
    if [ $(docker ps -aq | wc -l) -gt 0 ]; then
        docker ps -aq | xargs -r docker stop
        docker ps -aq | xargs -r docker rm -f
        echo -e "${GREEN}‚úÖ Containers removidos${NC}"
    else
        echo -e "${YELLOW}‚ö†Ô∏è  Nenhum container encontrado${NC}"
    fi
}

clean_images() {
    echo -e "${BLUE}üóëÔ∏è  Removendo imagens...${NC}"
    if [ $(docker images -q | wc -l) -gt 0 ]; then
        docker images -q | xargs -r docker rmi -f
        echo -e "${GREEN}‚úÖ Imagens removidas${NC}"
    else
        echo -e "${YELLOW}‚ö†Ô∏è  Nenhuma imagem encontrada${NC}"
    fi
}

clean_volumes() {
    echo -e "${BLUE}üóëÔ∏è  Removendo volumes...${NC}"
    if [ $(docker volume ls -q | wc -l) -gt 0 ]; then
        docker volume ls -q | xargs -r docker volume rm
        echo -e "${GREEN}‚úÖ Volumes removidos${NC}"
    else
        echo -e "${YELLOW}‚ö†Ô∏è  Nenhum volume encontrado${NC}"
    fi
}

clean_networks() {
    echo -e "${BLUE}üóëÔ∏è  Removendo redes customizadas...${NC}"
    networks=$(docker network ls -q | grep -vE '(^NETWORK|bridge|host|none)' || true)
    if [ ! -z "$networks" ]; then
        echo "$networks" | xargs -r docker network rm
        echo -e "${GREEN}‚úÖ Redes removidas${NC}"
    else
        echo -e "${YELLOW}‚ö†Ô∏è  Nenhuma rede customizada encontrada${NC}"
    fi
}

clean_cache() {
    echo -e "${BLUE}üóëÔ∏è  Limpando cache e dados orf√£os...${NC}"
    docker builder prune -a -f > /dev/null 2>&1
    docker system prune -a --volumes -f > /dev/null 2>&1
    echo -e "${GREEN}‚úÖ Cache limpo${NC}"
}

clean_n8n_only() {
    echo -e "${BLUE}üóëÔ∏è  Removendo apenas containers N8N...${NC}"
    
    # Parar containers N8N espec√≠ficos
    if docker ps -q --filter "name=n8n" | wc -l | grep -q "^[1-9]"; then
        docker ps -q --filter "name=n8n" | xargs -r docker stop
        echo -e "${GREEN}‚úÖ Containers N8N parados${NC}"
    fi
    
    # Remover containers N8N
    if docker ps -aq --filter "name=n8n" | wc -l | grep -q "^[1-9]"; then
        docker ps -aq --filter "name=n8n" | xargs -r docker rm -f
        echo -e "${GREEN}‚úÖ Containers N8N removidos${NC}"
    fi
    
    # Remover volumes N8N espec√≠ficos
    n8n_volumes=$(docker volume ls -q | grep -E "(n8n|devhub)" || true)
    if [ ! -z "$n8n_volumes" ]; then
        echo "$n8n_volumes" | xargs -r docker volume rm
        echo -e "${GREEN}‚úÖ Volumes N8N removidos${NC}"
    fi
    
    # Remover rede N8N se existir
    if docker network ls | grep -q "n8n"; then
        docker network rm n8n-network 2>/dev/null || true
        echo -e "${GREEN}‚úÖ Rede N8N removida${NC}"
    fi
}

list_containers() {
    echo -e "${BLUE}üìã Containers em execu√ß√£o:${NC}"
    echo
    
    # Verificar se h√° containers rodando
    if [ $(docker ps -q | wc -l) -eq 0 ]; then
        echo -e "${YELLOW}‚ö†Ô∏è  Nenhum container em execu√ß√£o${NC}"
        return
    fi
    
    # Cabe√ßalho da tabela
    printf "%-15s %-25s %-20s %-15s\n" "ID" "NOME" "IMAGEM" "STATUS"
    echo "$(printf '%.0s‚îÄ' {1..80})"
    
    # Listar containers com formata√ß√£o
    docker ps --format "{{.ID}}\t{{.Names}}\t{{.Image}}\t{{.Status}}" | while IFS=$'\t' read -r id name image status; do
        # Truncar campos se muito longos
        short_id="${id:0:12}"
        short_name="${name:0:23}"
        short_image="${image:0:18}"
        short_status="${status:0:13}"
        
        printf "%-15s %-25s %-20s %-15s\n" "$short_id" "$short_name" "$short_image" "$short_status"
    done
    
    echo
    echo -e "${CYAN}üí° Use: $0 remove-container <ID> para remover container espec√≠fico${NC}"
}

remove_container_by_id() {
    local container_id="$1"
    
    if [ -z "$container_id" ]; then
        echo -e "${RED}‚ùå ID do container n√£o fornecido${NC}"
        echo -e "${CYAN}üí° Use: $0 list-containers para ver IDs dispon√≠veis${NC}"
        exit 1
    fi
    
    # Verificar se container existe
    if ! docker ps -aq | grep -q "^$container_id"; then
        echo -e "${RED}‚ùå Container com ID '$container_id' n√£o encontrado${NC}"
        echo -e "${CYAN}üí° Use: $0 list-containers para ver IDs dispon√≠veis${NC}"
        exit 1
    fi
    
    # Obter nome do container para confirma√ß√£o
    container_name=$(docker ps -a --filter "id=$container_id" --format "{{.Names}}" 2>/dev/null || echo "Unknown")
    container_image=$(docker ps -a --filter "id=$container_id" --format "{{.Image}}" 2>/dev/null || echo "Unknown")
    
    echo -e "${BLUE}üìã Container selecionado:${NC}"
    echo "   ID: $container_id"
    echo "   Nome: $container_name" 
    echo "   Imagem: $container_image"
    echo
    
    confirm_action "remover o container '$container_name' (ID: $container_id)"
    
    echo -e "${BLUE}üóëÔ∏è  Removendo container espec√≠fico...${NC}"
    
    # Parar container se estiver rodando
    if docker ps -q | grep -q "^$container_id"; then
        echo -e "${BLUE}‚èπÔ∏è  Parando container...${NC}"
        docker stop "$container_id"
        echo -e "${GREEN}‚úÖ Container parado${NC}"
    fi
    
    # Remover container
    docker rm -f "$container_id"
    echo -e "${GREEN}‚úÖ Container '$container_name' removido com sucesso!${NC}"
}

show_usage() {
    echo -e "${BLUE}üê≥ N8N-DevHub - Limpeza Docker${NC}"
    echo
    echo "Uso: $0 [OP√á√ÉO]"
    echo
    echo "Op√ß√µes:"
    echo "  all                    Limpeza completa (containers, imagens, volumes, redes, cache)"
    echo "  containers             Remove apenas containers"
    echo "  images                 Remove apenas imagens"
    echo "  volumes                Remove apenas volumes (‚ö†Ô∏è  PERDE DADOS)"
    echo "  networks               Remove apenas redes customizadas"
    echo "  cache                  Limpa apenas cache e dados orf√£os"
    echo "  n8n                    Remove apenas recursos N8N (seguro para outros projetos)"
    echo "  list-containers        Lista containers em execu√ß√£o com ID e nome"
    echo "  remove-container <ID>  Remove container espec√≠fico por ID"
    echo "  help                   Mostra esta ajuda"
    echo
    echo "Exemplos:"
    echo "  $0 all                        # Limpeza completa"
    echo "  $0 n8n                        # Remove apenas N8N"
    echo "  $0 cache                      # Apenas limpa cache"
    echo "  $0 list-containers            # Ver containers rodando"
    echo "  $0 remove-container abc123    # Remove container espec√≠fico"
    echo
}

confirm_action() {
    local action="$1"
    echo -e "${YELLOW}‚ö†Ô∏è  ATEN√á√ÉO: Esta a√ß√£o ir√° $action${NC}"
    echo -e "${RED}Esta opera√ß√£o n√£o pode ser desfeita!${NC}"
    echo
    read -p "Tem certeza? (sim/n√£o): " confirm
    
    if [ "$confirm" != "sim" ]; then
        echo -e "${YELLOW}‚ùå Opera√ß√£o cancelada${NC}"
        exit 0
    fi
}

# Verificar se Docker est√° rodando
if ! docker info > /dev/null 2>&1; then
    echo -e "${RED}‚ùå Docker n√£o est√° rodando. Inicie o Docker primeiro.${NC}"
    exit 1
fi

# Processar argumentos
case "${1:-help}" in
    "all")
        confirm_action "remover TODOS os containers, imagens, volumes, redes e cache Docker"
        echo -e "${BLUE}üöÄ Iniciando limpeza completa...${NC}"
        clean_containers
        clean_images
        clean_volumes
        clean_networks
        clean_cache
        echo
        echo -e "${GREEN}üéâ Limpeza completa finalizada!${NC}"
        ;;
    
    "containers")
        confirm_action "remover TODOS os containers Docker"
        clean_containers
        ;;
    
    "images")
        confirm_action "remover TODAS as imagens Docker"
        clean_images
        ;;
    
    "volumes")
        confirm_action "remover TODOS os volumes Docker (TODOS OS DADOS SER√ÉO PERDIDOS)"
        clean_volumes
        ;;
    
    "networks")
        confirm_action "remover todas as redes Docker customizadas"
        clean_networks
        ;;
    
    "cache")
        echo -e "${BLUE}üöÄ Limpando cache Docker...${NC}"
        clean_cache
        echo -e "${GREEN}üéâ Cache limpo!${NC}"
        ;;
    
    "n8n")
        confirm_action "remover apenas recursos N8N (containers, volumes e redes N8N)"
        echo -e "${BLUE}üöÄ Removendo recursos N8N...${NC}"
        clean_n8n_only
        echo
        echo -e "${GREEN}üéâ Recursos N8N removidos!${NC}"
        echo -e "${BLUE}üí° Outros projetos Docker permanecem intactos${NC}"
        ;;
    
    "list-containers")
        list_containers
        ;;
    
    "remove-container")
        if [ -z "$2" ]; then
            echo -e "${RED}‚ùå ID do container n√£o fornecido${NC}"
            echo -e "${CYAN}üí° Use: $0 list-containers para ver IDs dispon√≠veis${NC}"
            exit 1
        fi
        remove_container_by_id "$2"
        ;;
    
    "help"|"-h"|"--help")
        show_usage
        ;;
    
    *)
        echo -e "${RED}‚ùå Op√ß√£o inv√°lida: $1${NC}"
        echo
        show_usage
        exit 1
        ;;
esac